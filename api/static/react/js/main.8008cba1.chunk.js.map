{"version":3,"sources":["components/Movies.js","components/MovieForm.js","App.js","serviceWorker.js","index.js"],"names":["Movies","movies","List","map","movie","Item","key","title","Header","Rating","rating","maxRating","disabled","MovieForm","onNewMovie","useState","setTitle","setRating","Form","Field","Input","placeholder","value","onChange","e","target","icon","onRate","_","data","Button","onClick","a","fetch","method","headers","body","JSON","stringify","ok","console","log","App","setMovies","useEffect","then","res","json","Container","style","marginTop","currentMovies","window","token","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAGaA,EAAS,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACvB,OACE,kBAACC,EAAA,EAAD,KACGD,EAAOE,KAAI,SAAAC,GACV,OACE,kBAACF,EAAA,EAAKG,KAAN,CAAWC,IAAKF,EAAMG,OACpB,kBAACC,EAAA,EAAD,KAASJ,EAAMG,OACf,kBAACE,EAAA,EAAD,CAAQC,OAAQN,EAAMM,OAAQC,UAAW,EAAGC,UAAQ,U,qDCPnDC,EAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACfC,mBAAS,IADM,mBACnCR,EADmC,KAC5BS,EAD4B,OAEbD,mBAAS,GAFI,mBAEnCL,EAFmC,KAE3BO,EAF2B,KAI3C,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACC,EAAA,EAAD,CACEC,YAAY,cACZC,MAAOf,EACPgB,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOH,WAGrC,kBAACJ,EAAA,EAAKC,MAAN,KACE,kBAACV,EAAA,EAAD,CACEiB,KAAK,OACLhB,OAAQA,EACRC,UAAW,EACXgB,OAAQ,SAACC,EAAGC,GACVZ,EAAUY,EAAKnB,YAIrB,kBAACQ,EAAA,EAAKC,MAAN,KACE,kBAACW,EAAA,EAAD,CACEC,QAAO,sBAAE,4BAAAC,EAAA,6DACD5B,EAAQ,CAACG,QAAOG,UADf,SAEgBuB,MAAM,aAAc,CACzCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUlC,KAPhB,cAUMmC,KACXC,QAAQC,IAAI,oBACZ3B,EAAWV,GACXY,EAAS,IACTC,EAAU,IAdL,4CADX,a,SCIOyB,MAzBf,WAAgB,IAAD,EAEe3B,mBAAS,IAFxB,mBAENd,EAFM,KAEE0C,EAFF,KAWb,OAPAC,qBAAU,WACRX,MAAM,WAAWY,MAAK,SAAAC,GAAG,OACvBA,EAAIC,OAAOF,MAAK,SAAAhB,GACdc,EAAUd,EAAK5B,gBAGlB,IAED,kBAAC+C,EAAA,EAAD,CACEC,MAAO,CAAEC,UAAW,KAEpB,kBAAC,EAAD,CACEpC,WAAY,SAAAV,GAAK,OAAIuC,GAAU,SAAAQ,GAAa,OAAK/C,GAAL,mBAAe+C,UAC7D,yCAAgBC,OAAOC,OACvB,kBAAC,EAAD,CACEpD,OAASA,MCbGqD,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"js/main.8008cba1.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Header, Rating } from 'semantic-ui-react';\n\nexport const Movies = ({ movies }) => {\n  return (\n    <List>\n      {movies.map(movie => {\n        return (\n          <List.Item key={movie.title}>\n            <Header>{movie.title}</Header>\n            <Rating rating={movie.rating} maxRating={5} disabled/>\n          </List.Item>\n        );\n      })}\n    </List>\n  );\n}","import React, { useState } from 'react';\nimport { Form, Input, Rating, Button } from 'semantic-ui-react';\n\nexport const MovieForm = ({ onNewMovie }) => {\n  const [ title, setTitle ] = useState('');\n  const [ rating, setRating ] = useState(1);\n\n  return (\n    <Form>\n      <Form.Field>\n        <Input \n          placeholder=\"movie title\"\n          value={title}\n          onChange={e => setTitle(e.target.value)}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Rating \n          icon='star'\n          rating={rating}\n          maxRating={5}\n          onRate={(_, data) => {\n            setRating(data.rating);\n          }}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Button \n          onClick={async () => {\n            const movie = {title, rating};\n            const response = await fetch('/add_movie', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(movie)\n            });\n\n            if (response.ok) {\n              console.log('response worked!');\n              onNewMovie(movie);\n              setTitle('');\n              setRating(1);\n            }\n          }}\n        >submit</Button>\n      </Form.Field>\n    </Form>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Movies } from './components/Movies';\nimport { MovieForm } from './components/MovieForm';\nimport { Container } from 'semantic-ui-react';\n\nfunction App() {\n\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    fetch('/movies').then(res => \n      res.json().then(data => {\n        setMovies(data.movies)\n      })\n    );\n  }, [])\n  return (\n    <Container \n      style={{ marginTop: 40 }}\n    >\n      <MovieForm \n        onNewMovie={movie => setMovies(currentMovies => [movie, ...currentMovies])} />\n      <p>My Token = { window.token }</p>\n      <Movies \n        movies={ movies }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}